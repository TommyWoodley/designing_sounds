version: 2.1
orbs:
  python: circleci/python@2.1.1
  win: circleci/windows@5.0
  macos: circleci/macos@2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs

jobs:
  test: # this can be any name you choose
    executor: python/default # use the default executor defined within the orb
    steps:
      - checkout # checkout source code
      - run:
          name: Python
          command: |
            echo $CI_PULL_REQUEST
            python3 --version
            sudo apt-get update
            sudo apt-get install libasound-dev libportaudio2 libportaudiocpp0 portaudio19-dev -y
            python -m pip install pyaudio
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: |
            mkdir test-results
            python -m pytest --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results

  lint:
    executor: python/default
    steps:
      - checkout
      - run:
          name: PyLint
          command: |
            pip install pylint
            pylint ./src
  
  create-cli-windows:
    executor:
      name: win/default
    steps:
      - run:
          name: Windows Test
          command: echo "Nothing here but us chickens"
          shell: bash.exe
  
  create-cli-linux:
    executor: python/default
    steps:
      - run:
          name: Build Linux CLI
          command: |
            echo "Nothing here but us chickens"

  create-cli-mac:
    macos:
      xcode: 13.4.1
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Installs
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install portaudio
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Constants
          command: |
            # CONSTANTS - ADD YOUR INFO
            DEVELOPER_EMAIL="thwoodley@gmail.com"
            APP="Sounds"
            SPEC='Sounds.spec'
            PKG_IDENTIFIER="com.tommywoodley.sounds.pkg"
            APP_VERSION=0.1
            TMP_PKG_PATH=dist/pkg.pkg
            SCRIPTS=./Scripts/
            sudo chmod -R +x $SCRIPTS
            SIGNED_PKG=dist/"$APP".pkg
            
            DEVELOPER_ID_APPLICATION="7D93DB6B20D79A98F052D3625615271C1FF03DEB"
            DEVELOPER_ID_INSTALLER_HASH="011A5B4D256D2B4A85AB318F7899334EF605C657"
            
            APPFILE=./dist/"$APP".app           # location of the .app file after PyInstaller builds it
            APP_NAME="$APP"                     # carrying different conventions
            APP_PATH="$APPFILE"                 # carrying different conventions
            PKG="$SIGNED_PKG"                   # carrying different conventions
      - run:
          name: CI Installs
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install python@3.10
            sudo pip3 install pyobjc
            cd build/mac
#            ./build_mac.sh
#            ls
      - run:
          name: "STEP 1: build the .app file with PyInstaller"
          command: |
            pyinstaller --noconfirm --clean "$SPEC"
#      - persist_to_workspace:
#          root: .
#          paths:
#            - build/mac/sounds.dmg

  
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            cd build/mac
            let num=<< pipeline.number >>-88
            VER=v2.$num.0
            ghr -t "${GITHUB_TOKEN}" -u "${CIRCLE_PROJECT_USERNAME}" -r "${CIRCLE_PROJECT_REPONAME}" -c "${CIRCLE_SHA1}" -delete $VER ./sounds.dmg
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  create-cli:
    jobs:
      - test
      - create-cli-mac:
          requires:
            - test
#          filters:
#            branches:
#              only:
#                - main
      - create-cli-windows:
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - create-cli-linux:
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - publish-github-release:
          requires:
            - create-cli-mac
            - create-cli-windows
            - create-cli-linux
          filters:
            branches:
              only:
                - main
